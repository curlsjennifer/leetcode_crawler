# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseEvenLengthGroups(self, head):
        rec = []
        while head != None:
            rec.append(head.val)
            head = head.next
        if len(rec) == 0:return None
        n = 1
        idx = 0
        while idx < len(rec):
            circle = min(len(rec)-idx, n)
            if mod(circle, 2) == 0:
                rr = [rec[i] for i in range(idx, idx+circle)]
                rr.reverse()
                for i in range(circle):rec[i+idx] = rr[i]
            idx += n
            n += 1
        rec.reverse()
        if len(rec) == 0:return None
        res = ListNode(val = rec[0])
        if len(rec) > 1:
            for i in range(1, len(rec)):res = ListNode(val = rec[i], next = res)
        return res