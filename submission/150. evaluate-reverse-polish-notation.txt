class Solution(object):
    def evalRPN(self, tokens):
        tokens = [[1 if item in ["+", "-", "*", "/"] else 0, item] for item in 
            tokens]
        while len(tokens) > 2:
            for i in range(2, len(tokens)):
                if [tokens[i-2][0], tokens[i-1][0], tokens[i][0]] == [0, 0, 1]:
                    print("AAAA", tokens[i-2], tokens[i-1], tokens[i])
                    if tokens[i][1] == "+":
                        tokens[i-2] = [0, str(int(tokens[i-2][1]) + int(tokens[i
                            -1][1]))]
                    elif tokens[i][1] == "-":
                        tokens[i-2] = [0, str(int(tokens[i-2][1]) - int(tokens[i
                            -1][1]))]
                    elif tokens[i][1] == "*":
                        tokens[i-2] = [0, str(int(tokens[i-2][1]) * int(tokens[i
                            -1][1]))]
                    elif tokens[i][1] == "/":
                        sign = (1 if int(tokens[i-2][1]) >= 0 else -1) * (1 if int
                            (tokens[i-1][1]) >= 0 else -1)
                        tokens[i-2][1] = (1 if int(tokens[i-2][1]) >= 0 else -1) * 
                            int(tokens[i-2][1])
                        tokens[i-1][1] = (1 if int(tokens[i-1][1]) >= 0 else -1) * 
                            int(tokens[i-1][1])
                        res = str(sign*int(tokens[i-2][1]/tokens[i-1][1]))
                        tokens[i-2] = [0, res]
                    else:
                        tokens[i-2] = tokens[i-2]
                    tokens[i-1] = [2, "0"]
                    tokens[i] = [2, "0"]
            tokens = [item for item in tokens if item[0] < 2]
        return int(tokens[0][1])