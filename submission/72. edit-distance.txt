class Solution(object):
    def minDistance(self, word1, word2):
        if (len(word1) == 0) | (len(word2) == 0):return max(len(word1), len(word2))
        if (len(word1) == 1) | (len(word2) == 1):
            if len(word1) > 1:return len(word1)-1 if word2 in word1 else len(word1)
            return len(word2)-1 if word1 in word2 else len(word2)
            return max(len(word1), len(word2))
        rec = [[-1 for i in range(len(word1))] for j in range(len(word2))]
        rec[0][0] = 0 if word1[0] == word2[0] else 1
        for k in range(1, len(word1) + len(word2)):
            for j in range(len(word1)):
                i = k - j
                if (i < 0) | (i > len(word2) - 1):continue
                if i == 0:
                    rec[i][j] = j+1 if word2[i] not in word1[:j+1] else j
                elif j == 0:
                    rec[i][j] = i+1 if word1[j] not in word2[:i+1] else i
                elif word1[j] == word2[i]:
                    rec[i][j] = rec[i-1][j-1]
                else:
                    rec[i][j] = min(rec[i-1][j], rec[i][j-1], rec[i-1][j-1]) + 1
                print(i, j, rec[i][j], word1[j], word2[i])
        return rec[-1][-1]
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        