class Solution(object):
    def restoreIpAddresses(self, s):
        self.dirs = {}
        return self.rip(s, 4)
    def rip(self, s, n):
        #print("SS", s)
        if len(s) == 0:return []
        if len(s) == 1:
            return [s] if n == 1 else []
        if n == 1:
            if len(s) > 3:return []
            if (int(s) < 256):
                return [s] if (s[0] != "0") else []
            else:
                return []
        if len(s) > 3*n:return []
        if len(s) == n:
            self.dirs[str(n) + "_" + s] = [".".join(s)]
            return self.dirs[str(n) + "_" + s]
        if len(s) == 3*n:
            val = [s[i*3:i*3+3] for i in range(n)]
            if max([int(it) for it in val]) > 256:return []
            if max([1 if it[0] == "0" else 0 for it in val]):return []
            return [".".join(val)]
        try:
            return self.dirs[[n,s]]
        except:
            x = 1
        res = []
        if (len(s) < 3*n - 1):res.extend([s[0] + "." + item for item in self.rip(s[1
            :], n-1)])
        #print("P", s, res)
        if (s[0] != "0") & (n < len(s) < 3*n):
            res.extend([s[0:2] + "." + item for item in self.rip(s[2:], n-1)])
        #print("Q", s, res,n)
        if (s[0] != "0") & (int(s[:min(len(s), 3)]) < 256) & (n +1 < len(s)):res
            .extend([s[0:3] + "." + item for item in self.rip(s[3:], n-1)])
        #print("AAA", s, res)
        self.dirs[str(n) + "_" + s] = res
        return res
        