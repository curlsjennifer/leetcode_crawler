# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator(object):
    def __init__(self, root):
        self.node = self.gt(root)
        self.idx = -1
        self.l = len(self.node)
    def gt(self, root):
        if root == None:return []
        left = self.gt(root.left)
        right = self.gt(root.right)
        return left + [root.val] + right
        """
        :type root: TreeNode
        """
    def next(self):
        self.idx += 1
        if self.idx < self.l:return self.node[self.idx]
        return None
            def hasNext(self):
        return True if self.idx < self.l-1 else False
        """
        :rtype: bool
        """
        # Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()